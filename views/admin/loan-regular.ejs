<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Regular/Agricultural Loan Form | BOCOFAMCO Admin</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: #333;
            min-height: 100vh;
        }

        .main-content {
            margin-left: 280px;
            padding: 30px;
            transition: margin-left 0.3s ease;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
            color: #1e3a8a;
        }

        .form-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            max-width: 600px;
            margin: 0 auto;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-weight: 500;
            margin-bottom: 8px;
            color: #1e3a8a;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #1e3a8a;
            box-shadow: 0 0 0 3px rgba(30, 58, 138, 0.1);
        }

        .form-group .readonly {
            background-color: #f9fafb;
            cursor: not-allowed;
        }

        .form-group .readonly:focus {
            border-color: #e5e7eb;
            box-shadow: none;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 30px;
        }

        .form-actions button {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .form-actions button.submit {
            background-color: #1e3a8a;
            color: white;
        }

        .form-actions button.submit:hover {
            background-color: #1d3557;
        }

        .form-actions button.cancel {
            background-color: #e5e7eb;
            color: #333;
        }

        .form-actions button.cancel:hover {
            background-color: #d1d5db;
        }

        .form-actions button.save {
            background-color: #047857;
            color: white;
        }

        .form-actions button.save:hover {
            background-color: #065f46;
        }

        .radio-group {
            display: flex;
            gap: 20px;
            margin-top: 8px;
        }

        .radio-option {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .radio-option input {
            width: auto;
        }

        .total-loan {
            background-color: #f0f9ff;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            border: 1px solid #e0f2fe;
        }

        .total-loan-label {
            font-weight: 600;
            color: #0369a1;
        }

        .total-loan-value {
            font-size: 18px;
            font-weight: 700;
            color: #1e3a8a;
        }

        .or-section {
            background-color: #ecfdf5;
            padding: 20px;
            border-radius: 8px;
            margin-top: 30px;
            border: 1px solid #d1fae5;
        }

        .or-title {
            font-size: 18px;
            font-weight: 600;
            color: #065f46;
            margin-bottom: 15px;
            text-align: center;
        }

        .loan-type-radio {
            margin-bottom: 15px;
        }
        
        .take-home-section {
            background-color: #eff6ff;
            padding: 20px;
            border-radius: 8px;
            margin-top: 30px;
            border: 1px solid #bfdbfe;
        }
        
        .take-home-title {
            font-size: 18px;
            font-weight: 600;
            color: #1e40af;
            margin-bottom: 15px;
            text-align: center;
        }
        
        .take-home-value {
            font-size: 20px;
            font-weight: 700;
            color: #1e3a8a;
        }
        
        .property-section {
            background-color: #ffedd5;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            border: 1px solid #fed7aa;
        }
        
        .property-title {
            font-size: 18px;
            font-weight: 600;
            color: #92400e;
            margin-bottom: 15px;
            text-align: center;
        }
    </style>
</head>
<body>
    <% const currentPage = 'loan-applications'; %>
    <%- include('../partials/adminsidebar', { currentPage }) %>

    <div class="main-content">
        <div class="page-header">
            <h1 class="page-title">Regular/Agricultural Loan Form</h1>
        </div>

        <div class="form-container">
            <!-- Display the CB_NUMBER -->
            <div class="form-group">
                <label for="cbNumber">CB Number</label>
                <input type="text" id="cbNumber" class="readonly" 
                       value="<%= typeof cbNumber !== 'undefined' ? cbNumber : (typeof loan !== 'undefined' ? loan.cb_number : '') %>" 
                       readonly>
            </div>

            <!-- Property Value Section -->
            <div class="property-section">
                <div class="property-title">PROPERTY DETAILS</div>
                
                <div class="form-group">
                    <label for="propertyValue">Value of Property (₱)</label>
                    <input type="number" id="propertyValue" placeholder="Enter property value" value="0">
                </div>
                
                <div class="form-group">
                    <label for="maxLoanAmount">Maximum Loanable Amount (25% of Property Value) (₱)</label>
                    <input type="number" id="maxLoanAmount" class="readonly" value="0" readonly>
                </div>
            </div>

            <div class="form-group">
                <label>Loan Application Type</label>
                <div class="radio-group">
                    <div class="radio-option">
                        <input type="radio" id="newLoan" name="loanApplicationType" value="new" checked>
                        <label for="newLoan">New Loan</label>
                    </div>
                    <div class="radio-option">
                        <input type="radio" id="renewLoan" name="loanApplicationType" value="renew">
                        <label for="renewLoan">Renewal</label>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="loanAmount">Loan Amount (₱)</label>
                <input type="number" id="loanAmount" placeholder="Enter loan amount" value="0" required>
            </div>

            <div class="form-group">
                <label for="previousBalance">Previous Loan Balance (₱)</label>
                <input type="number" id="previousBalance" placeholder="Enter previous loan balance" value="0" required>
            </div>

            <div class="form-group">
                <label for="newBalance">New Loan Balance (₱)</label>
                <input type="number" id="newBalance" class="readonly" value="0" readonly>
            </div>

            <div class="form-group">
                <label for="serviceFee">Service Fee (SF) - 3% (₱)</label>
                <input type="number" id="serviceFee" class="readonly" value="0" readonly>
            </div>

            <div class="form-group">
                <label for="processingFee">Processing Fee (PF) - 1% (₱)</label>
                <input type="number" id="processingFee" class="readonly" value="0" readonly>
            </div>

            <!-- Total Loan Calculation Section -->
            <div class="total-loan">
                <div class="form-group">
                    <label class="total-loan-label">Total Deductions (SF + PF)</label>
                    <input type="number" id="totalDeductions" class="readonly" value="0" readonly>
                </div>
                <div class="form-group">
                    <label class="total-loan-label">Total Loan Amount Received</label>
                    <input type="number" id="totalLoan" class="readonly total-loan-value" value="0" readonly>
                </div>
            </div>

            <!-- OR Section -->
            <div class="or-section" id="orSection">
                <div class="or-title">OFFICIAL RECEIPT (OR) DETAILS</div>
                
                <div class="form-group">
                    <label for="memberFee">Member Fee (₱)</label>
                    <input type="number" id="memberFee" class="readonly" value="0" readonly>
                </div>

                <div class="form-group">
                    <label for="shareCapital">Share Capital (SC) (₱)</label>
                    <input type="number" id="shareCapital" class="readonly" value="0" readonly>
                </div>

                <div class="form-group">
                    <label for="bayanihanSavings">Bayanihan Savings (BS) (₱)</label>
                    <input type="number" id="bayanihanSavings" placeholder="Enter Bayanihan Savings amount" value="0">
                </div>
                
                <div class="form-group">
                    <label for="advanceInterest">Advance Interest (AI) - 3% (₱)</label>
                    <input type="number" id="advanceInterest" class="readonly" value="0" readonly>
                </div>

                <div class="form-group">
                    <label class="total-loan-label">Total OR Amount (₱)</label>
                    <input type="number" id="totalOrAmount" class="readonly total-loan-value" value="0" readonly>
                </div>
            </div>
            
            <!-- Take Home Section -->
            <div class="take-home-section" id="takeHomeSection">
                <div class="take-home-title">TAKE HOME AMOUNT</div>
                <div class="form-group">
                    <label class="total-loan-label">Total Loan Amount Received - Total OR Amount (₱)</label>
                    <input type="number" id="takeHomeAmount" class="readonly take-home-value" value="0" readonly>
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="cancel" onclick="window.history.back()">Cancel</button>
                <button type="button" class="save" onclick="saveForm()">Save</button>
                <button type="button" class="submit" onclick="submitForm()">Submit</button>
            </div>
        </div>
    </div>

    <script>
        // Function to get query parameters from the URL
        function getQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
        }

        // Function to fetch loan details based on CB_NUMBER
        async function fetchLoanDetails(cbNumber) {
            if (!cbNumber) return;

            try {
                // Fetch data from the server
                const response = await fetch(`/api/loan-details?cbNumber=${cbNumber}`);
                const data = await response.json();

                // Populate the form fields
                document.getElementById('cbNumber').value = cbNumber;
                document.getElementById('previousBalance').value = data.previousBalance || 0;
                document.getElementById('propertyValue').value = data.propertyValue || 0;
                
                // Trigger calculations
                calculateAll();
            } catch (error) {
                console.error('Error fetching loan details:', error);
            }
        }

        // Calculate maximum loan amount based on property value
        function calculateMaxLoan() {
            const propertyValue = parseFloat(document.getElementById('propertyValue').value) || 0;
            const maxLoanAmount = propertyValue * 0.25; // 25% of property value
            document.getElementById('maxLoanAmount').value = maxLoanAmount.toFixed(2);
            
            // Update loan amount field with max value if it's higher than current input
            const loanAmount = parseFloat(document.getElementById('loanAmount').value) || 0;
            if (loanAmount > maxLoanAmount) {
                document.getElementById('loanAmount').value = maxLoanAmount.toFixed(2);
            }
        }

        // Calculate OR details (Member Fee, Share Capital, etc.)
        function calculateOrDetails() {
            const loanApplicationType = document.querySelector('input[name="loanApplicationType"]:checked').value;
            const loanAmount = parseFloat(document.getElementById('loanAmount').value) || 0;
            const previousBalance = parseFloat(document.getElementById('previousBalance').value) || 0;
            
            // Calculate Member Fee (500 for new loan, 0 for renewal)
            const memberFee = loanApplicationType === 'new' ? 500 : 0;
            document.getElementById('memberFee').value = memberFee.toFixed(2);
            
            // Calculate Share Capital (5% for new loan, 3% for renewal)
            let shareCapital;
            if (loanApplicationType === 'new') {
                // New loan - 5% of principal amount
                shareCapital = loanAmount * 0.05;
            } else {
                // Renewal - 3% of new balance (principal - previous balance)
                const newBalance = loanAmount - previousBalance;
                shareCapital = newBalance > 0 ? newBalance * 0.03 : 0;
            }
            document.getElementById('shareCapital').value = shareCapital.toFixed(2);
            
            // Get Bayanihan Savings (user input)
            const bayanihanSavings = parseFloat(document.getElementById('bayanihanSavings').value) || 0;
            
            // Calculate Advance Interest (3% of loan amount)
            const advanceInterest = loanAmount * 0.03;
            document.getElementById('advanceInterest').value = advanceInterest.toFixed(2);
            
            // Calculate Total OR Amount
            const totalOrAmount = memberFee + shareCapital + bayanihanSavings + advanceInterest;
            document.getElementById('totalOrAmount').value = totalOrAmount.toFixed(2);
        }

        // Calculate loan fees and balances
        function calculateLoanDetails() {
            const loanAmount = parseFloat(document.getElementById('loanAmount').value) || 0;
            const previousBalance = parseFloat(document.getElementById('previousBalance').value) || 0;

            const newBalance = Math.max(0, loanAmount - previousBalance);
            document.getElementById('newBalance').value = newBalance.toFixed(2);

            // Service fee is 3% for regular/agricultural loans
            const serviceFee = newBalance * 0.03;
            document.getElementById('serviceFee').value = serviceFee.toFixed(2);

            // Processing fee is 1%
            const processingFee = newBalance * 0.01;
            document.getElementById('processingFee').value = processingFee.toFixed(2);

            // Calculate total deductions and total loan
            const totalDeductions = serviceFee + processingFee;
            const totalLoan = Math.max(0, newBalance - totalDeductions);
            
            document.getElementById('totalDeductions').value = totalDeductions.toFixed(2);
            document.getElementById('totalLoan').value = totalLoan.toFixed(2);
        }
        
        // Calculate Take Home Amount (Total Loan Amount Received - Total OR Amount)
        function calculateTakeHome() {
            const totalLoan = parseFloat(document.getElementById('totalLoan').value) || 0;
            const totalOrAmount = parseFloat(document.getElementById('totalOrAmount').value) || 0;
            
            const takeHomeAmount = Math.max(0, totalLoan - totalOrAmount);
            document.getElementById('takeHomeAmount').value = takeHomeAmount.toFixed(2);
        }

        // Calculate all values
        function calculateAll() {
            calculateMaxLoan();
            calculateLoanDetails();
            calculateOrDetails();
            calculateTakeHome();
        }

        // Save form data without submitting
        function saveForm() {
            calculateAll();
            
            // Scroll to Take Home section
            document.getElementById('takeHomeSection').scrollIntoView({ 
                behavior: 'smooth' 
            });
            
            // Show success message
            alert('Loan details have been saved. Please check the Take Home Amount below.');
        }

        // Validate and submit the form
        function submitForm() {
            // First ensure all calculations are up to date
            calculateAll();
            
            const loanAmount = parseFloat(document.getElementById('loanAmount').value) || 0;
            const previousBalance = parseFloat(document.getElementById('previousBalance').value) || 0;
            const propertyValue = parseFloat(document.getElementById('propertyValue').value) || 0;
            const bayanihanSavings = parseFloat(document.getElementById('bayanihanSavings').value) || 0;

            if (!loanAmount || !propertyValue) {
                alert('Please fill out all required fields including Property Value and Loan Amount.');
                return;
            }

            // Check if loan amount exceeds maximum allowed (25% of property value)
            const maxLoanAmount = parseFloat(document.getElementById('maxLoanAmount').value) || 0;
            if (loanAmount > maxLoanAmount) {
                alert('Loan amount cannot exceed 25% of property value (₱' + maxLoanAmount.toFixed(2) + ')');
                return;
            }

            const formData = {
                cbNumber: document.getElementById('cbNumber').value,
                propertyValue: propertyValue,
                maxLoanAmount: maxLoanAmount,
                loanApplicationType: document.querySelector('input[name="loanApplicationType"]:checked').value,
                loanAmount: loanAmount,
                previousBalance: previousBalance,
                newBalance: document.getElementById('newBalance').value,
                serviceFee: document.getElementById('serviceFee').value,
                processingFee: document.getElementById('processingFee').value,
                totalDeductions: document.getElementById('totalDeductions').value,
                totalLoan: document.getElementById('totalLoan').value,
                memberFee: document.getElementById('memberFee').value,
                shareCapital: document.getElementById('shareCapital').value,
                bayanihanSavings: bayanihanSavings,
                advanceInterest: document.getElementById('advanceInterest').value,
                totalOrAmount: document.getElementById('totalOrAmount').value,
                takeHomeAmount: document.getElementById('takeHomeAmount').value
            };

            // For demo purposes - in a real app, you would send this to your server
            console.log('Form data to submit:', formData);
            alert('Loan application submitted successfully!\n(Check console for submitted data)');
            // window.location.href = '/admin/dashboard';
        }

        // Initialize the form when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial values
            document.getElementById('propertyValue').value = '0';
            document.getElementById('loanAmount').value = '0';
            document.getElementById('previousBalance').value = '0';
            document.getElementById('bayanihanSavings').value = '0';
            
            // Run initial calculations
            calculateAll();
            
            // If we have a CB Number in the URL, fetch loan details
            const urlCbNumber = getQueryParam('cbNumber');
            if (urlCbNumber) {
                fetchLoanDetails(urlCbNumber);
            }
            
            // Set up event listeners
            document.getElementById('propertyValue').addEventListener('input', calculateAll);
            document.getElementById('loanAmount').addEventListener('input', calculateAll);
            document.getElementById('previousBalance').addEventListener('input', calculateAll);
            document.getElementById('bayanihanSavings').addEventListener('input', calculateAll);
            
            document.querySelectorAll('input[name="loanApplicationType"]').forEach(radio => {
                radio.addEventListener('change', calculateAll);
            });
        });
    </script>
</body>
</html>
